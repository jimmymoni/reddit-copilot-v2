import { useState, useEffect } from 'react'

export interface RedditPost {
  id: string
  title: string
  content: string
  author: string
  subreddit: string
  score: number
  commentCount: number
  created: Date
  url: string
  permalink: string
  mediaType: 'text' | 'image' | 'video' | 'link'
  mediaUrl?: string
  flair?: string
  isNSFW: boolean
  upvoteRatio: number
}

export interface EngagementSuggestion {
  id: string
  postId: string
  type: 'thoughtful_comment' | 'question' | 'experience_share' | 'helpful_advice'
  content: string
  reasoning: string
  confidence: number
  ruleCompliance: boolean
  riskLevel: 'low' | 'medium' | 'high'
  estimatedReception: string
}

interface HomeFeedProps {
  redditId: string
}

export default function HomeFeed({ redditId }: HomeFeedProps) {
  const [posts, setPosts] = useState<RedditPost[]>([])
  const [selectedPost, setSelectedPost] = useState<RedditPost | null>(null)
  const [suggestions, setSuggestions] = useState<EngagementSuggestion[]>([])
  const [loading, setLoading] = useState(false)
  const [loadingSuggestions, setLoadingSuggestions] = useState(false)
  const [userInput, setUserInput] = useState('')
  const [voiceInput, setVoiceInput] = useState(false)
  const [showModal, setShowModal] = useState(false)

  const fetchHomeFeed = async () => {
    setLoading(true)
    try {
      const response = await fetch('http://localhost:3001/api/homefeed', {
        headers: {
          'x-reddit-id': redditId
        }
      })
      
      if (!response.ok) throw new Error('Failed to fetch home feed')
      
      const data = await response.json()
      setPosts(data.posts.map((post: any) => ({
        ...post,
        created: new Date(post.created)
      })))
    } catch (error) {
      console.error('Failed to fetch home feed:', error)
    }
    setLoading(false)
  }

  const generateSuggestions = async (post: RedditPost) => {
    setLoadingSuggestions(true)
    setSelectedPost(post)
    setShowModal(true)
    
    try {
      const response = await fetch('http://localhost:3001/api/homefeed/engagement-suggestions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-reddit-id': redditId
        },
        body: JSON.stringify({ postId: post.id })
      })
      
      if (!response.ok) throw new Error('Failed to generate suggestions')
      
      const data = await response.json()
      setSuggestions(data.suggestions)
    } catch (error) {
      console.error('Failed to generate suggestions:', error)
    }
    setLoadingSuggestions(false)
  }

  const refineUserInput = async () => {
    if (!selectedPost || !userInput.trim()) return

    setLoadingSuggestions(true)
    
    try {
      const response = await fetch('http://localhost:3001/api/homefeed/refine-input', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-reddit-id': redditId
        },
        body: JSON.stringify({ 
          postId: selectedPost.id, 
          userInput: userInput.trim()
        })
      })
      
      if (!response.ok) throw new Error('Failed to refine input')
      
      const data = await response.json()
      setSuggestions([data.refinedSuggestion])
      setUserInput('')
    } catch (error) {
      console.error('Failed to refine input:', error)
    }
    setLoadingSuggestions(false)
  }

  const postComment = async (suggestion: EngagementSuggestion) => {
    const confirmed = window.confirm(
      `Post this comment to r/${selectedPost?.subreddit}?\n\n"${suggestion.content.substring(0, 200)}..."`
    )
    
    if (!confirmed) return

    try {
      const response = await fetch('http://localhost:3001/api/homefeed/comment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-reddit-id': redditId
        },
        body: JSON.stringify({ 
          postId: selectedPost?.id, 
          content: suggestion.content 
        })
      })
      
      if (!response.ok) throw new Error('Failed to post comment')
      
      const data = await response.json()
      alert(`Comment posted successfully! View at: ${data.result.url}`)
      setShowModal(false)
      setSuggestions([])
    } catch (error) {
      console.error('Failed to post comment:', error)
      alert('Failed to post comment. Please try again.')
    }
  }

  const startVoiceInput = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      alert('Speech recognition not supported in this browser')
      return
    }

    setVoiceInput(true)
    const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
    const recognition = new SpeechRecognition()
    
    recognition.continuous = false
    recognition.interimResults = false
    recognition.lang = 'en-US'
    
    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript
      setUserInput(transcript)
      setVoiceInput(false)
    }
    
    recognition.onerror = () => {
      setVoiceInput(false)
      alert('Speech recognition failed. Please try again.')
    }
    
    recognition.onend = () => {
      setVoiceInput(false)
    }
    
    recognition.start()
  }

  useEffect(() => {
    fetchHomeFeed()
  }, [])

  const getRelativeTime = (date: Date) => {
    const now = new Date()
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)
    
    if (diffInSeconds < 60) return `${diffInSeconds}s ago`
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`
    if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`
    if (diffInSeconds < 2419200) return `${Math.floor(diffInSeconds / 604800)}w ago`
    if (diffInSeconds < 29030400) return `${Math.floor(diffInSeconds / 2419200)}mo ago`
    return `${Math.floor(diffInSeconds / 29030400)}y ago`
  }

  const formatScore = (score: number) => {
    if (Math.abs(score) >= 1000000) return `${(score / 1000000).toFixed(1)}M`
    if (Math.abs(score) >= 1000) return `${(score / 1000).toFixed(1)}k`
    return score.toString()
  }

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'low': return 'text-green-600 bg-green-100'
      case 'medium': return 'text-yellow-600 bg-yellow-100'
      case 'high': return 'text-red-600 bg-red-100'
      default: return 'text-gray-600 bg-gray-100'
    }
  }

  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="bg-white shadow-sm sticky top-0 z-10 p-6">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold flex items-center text-gray-900">
            üè† Home Feed ({posts.length} posts)
          </h2>
          <button
            onClick={fetchHomeFeed}
            disabled={loading}
            className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-3 rounded-full font-semibold hover:from-orange-600 hover:to-red-600 disabled:from-gray-400 disabled:to-gray-500 transition-all transform hover:scale-105 flex items-center space-x-2"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                <span>Loading...</span>
              </>
            ) : (
              <>
                <span>üîÑ</span>
                <span>Refresh Feed</span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* Netflix-style 3-Column Card Layout */}
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {posts.length === 0 ? (
            <div className="col-span-full text-center py-16 text-gray-500">
              <div className="bg-white rounded-2xl shadow-xl p-12 max-w-md mx-auto">
                <div className="text-8xl mb-6">üì±</div>
                <p className="text-2xl font-bold mb-4 text-gray-800">No posts yet</p>
                <p className="text-gray-500">Click "Refresh Feed" to load latest posts from your subreddits!</p>
              </div>
            </div>
          ) : (
            posts.map((post) => (
              <div 
                key={post.id} 
                className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transform hover:scale-105 transition-all duration-300 cursor-pointer group"
                onClick={() => generateSuggestions(post)}
              >
                {/* Card Header with Media */}
                <div className="relative aspect-video">
                  {post.mediaType === 'image' && post.mediaUrl ? (
                    <img 
                      src={post.mediaUrl} 
                      alt={post.title}
                      className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                      onError={(e) => {
                        (e.target as HTMLImageElement).style.display = 'none'
                      }}
                    />
                  ) : post.mediaType === 'video' ? (
                    <div className="w-full h-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                      <div className="text-center text-white">
                        <div className="text-5xl mb-3">üé•</div>
                        <p className="font-semibold">Video Post</p>
                      </div>
                    </div>
                  ) : post.mediaType === 'link' ? (
                    <div className="w-full h-full bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center">
                      <div className="text-center text-white">
                        <div className="text-5xl mb-3">üîó</div>
                        <p className="font-semibold">External Link</p>
                      </div>
                    </div>
                  ) : (
                    <div className="w-full h-full bg-gradient-to-br from-gray-700 to-gray-900 flex items-center justify-center">
                      <div className="text-center text-white">
                        <div className="text-5xl mb-3">üìù</div>
                        <p className="font-semibold">Text Post</p>
                      </div>
                    </div>
                  )}
                  
                  {/* Overlay Labels */}
                  <div className="absolute top-4 left-4 flex items-center space-x-2">
                    <span className="bg-black/80 text-white text-xs px-3 py-1 rounded-full font-medium">
                      r/{post.subreddit}
                    </span>
                    {post.isNSFW && (
                      <span className="bg-red-500 text-white text-xs px-3 py-1 rounded-full font-bold">
                        NSFW
                      </span>
                    )}
                  </div>

                  {post.flair && (
                    <div className="absolute top-4 right-4">
                      <span className="bg-blue-500/90 text-white text-xs px-3 py-1 rounded-full font-medium">
                        {post.flair}
                      </span>
                    </div>
                  )}

                  {/* Hover Overlay */}
                  <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        generateSuggestions(post)
                      }}
                      className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-full font-bold hover:from-purple-700 hover:to-blue-700 transform hover:scale-110 transition-all duration-200 flex items-center space-x-3 text-lg"
                    >
                      <span>ü§ñ</span>
                      <span>Get AI Help</span>
                    </button>
                  </div>
                </div>

                {/* Card Content */}
                <div className="p-5">
                  {/* Post Title */}
                  <h3 className="font-bold text-lg text-gray-900 mb-3 group-hover:text-blue-600 transition-colors leading-tight" style={{
                    display: '-webkit-box',
                    WebkitLineClamp: 2,
                    WebkitBoxOrient: 'vertical',
                    overflow: 'hidden'
                  }}>
                    <a 
                      href={`https://reddit.com${post.permalink}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="hover:underline"
                      onClick={(e) => e.stopPropagation()}
                    >
                      {post.title}
                    </a>
                  </h3>

                  {/* Post Preview Text */}
                  {post.content && (
                    <p className="text-sm text-gray-600 mb-4" style={{
                      display: '-webkit-box',
                      WebkitLineClamp: 3,
                      WebkitBoxOrient: 'vertical',
                      overflow: 'hidden'
                    }}>
                      {post.content}
                    </p>
                  )}

                  {/* Post Meta */}
                  <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                    <span className="hover:text-blue-600 cursor-pointer font-medium">
                      u/{post.author}
                    </span>
                    <span title={new Date(post.created).toLocaleString()} className="hover:text-gray-700">
                      {getRelativeTime(post.created)}
                    </span>
                  </div>

                  {/* Post Stats */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="flex items-center space-x-1 text-orange-500 font-semibold">
                        <span>‚¨ÜÔ∏è</span>
                        <span>{formatScore(post.score)}</span>
                      </div>
                      <div className="flex items-center space-x-1 text-blue-500 font-semibold">
                        <span>üí¨</span>
                        <span>{post.commentCount}</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <button 
                        className="text-gray-400 hover:text-yellow-500 transition-colors text-lg"
                        onClick={(e) => e.stopPropagation()}
                      >
                        ‚≠ê
                      </button>
                      <button 
                        className="text-gray-400 hover:text-green-500 transition-colors text-lg"
                        onClick={(e) => {
                          e.stopPropagation()
                          if (navigator.share) {
                            navigator.share({
                              title: post.title,
                              url: `https://reddit.com${post.permalink}`
                            })
                          } else {
                            navigator.clipboard.writeText(`https://reddit.com${post.permalink}`)
                            alert('Link copied!')
                          }
                        }}
                      >
                        üì§
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* AI Suggestion Modal */}
      {showModal && selectedPost && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="sticky top-0 bg-white border-b p-6 rounded-t-2xl">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h2 className="text-xl font-bold text-gray-900 mb-2">
                    ü§ñ AI Engagement Assistant
                  </h2>
                  <p className="text-sm text-gray-600 line-clamp-2">
                    <strong>r/{selectedPost.subreddit}</strong> ‚Ä¢ {selectedPost.title}
                  </p>
                </div>
                <button
                  onClick={() => {
                    setShowModal(false)
                    setSuggestions([])
                    setUserInput('')
                  }}
                  className="text-gray-400 hover:text-gray-600 text-2xl"
                >
                  ‚úï
                </button>
              </div>
            </div>

            {/* Modal Content */}
            <div className="p-6 space-y-6">
              {/* Voice/Text Input Section */}
              <div className="bg-gray-50 rounded-xl p-6">
                <h3 className="font-semibold mb-4 flex items-center">
                  <span className="mr-2">üí≠</span>
                  What are your thoughts on this post?
                </h3>
                <div className="space-y-4">
                  <textarea
                    value={userInput}
                    onChange={(e) => setUserInput(e.target.value)}
                    placeholder="Share your thoughts, ask a question, or describe what you want to comment..."
                    className="w-full p-4 border rounded-xl resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    rows={4}
                  />
                  <div className="flex space-x-3">
                    <button
                      onClick={startVoiceInput}
                      disabled={voiceInput}
                      className="bg-red-500 text-white px-6 py-3 rounded-xl font-medium hover:bg-red-600 disabled:bg-red-300 flex items-center space-x-2 transition-colors"
                    >
                      {voiceInput ? (
                        <>
                          <div className="animate-pulse w-3 h-3 bg-white rounded-full"></div>
                          <span>Listening...</span>
                        </>
                      ) : (
                        <>
                          <span>üé§</span>
                          <span>Voice Input</span>
                        </>
                      )}
                    </button>
                    <button
                      onClick={refineUserInput}
                      disabled={!userInput.trim() || loadingSuggestions}
                      className="bg-blue-600 text-white px-6 py-3 rounded-xl font-medium hover:bg-blue-700 disabled:bg-blue-300 flex items-center space-x-2 transition-colors"
                    >
                      <span>‚ú®</span>
                      <span>Get AI Suggestions</span>
                    </button>
                  </div>
                </div>
              </div>

              {/* AI Suggestions Section */}
              <div>
                <h3 className="font-semibold mb-4 flex items-center">
                  <span className="mr-2">üéØ</span>
                  AI Comment Suggestions
                </h3>

                {loadingSuggestions ? (
                  <div className="text-center py-12">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Analyzing post and generating personalized suggestions...</p>
                  </div>
                ) : suggestions.length > 0 ? (
                  <div className="space-y-4">
                    {suggestions.map((suggestion) => (
                      <div key={suggestion.id} className="bg-white border-2 border-gray-100 rounded-xl p-6 hover:border-blue-200 transition-colors">
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3">
                            <span className="text-lg font-semibold capitalize text-gray-800">
                              {suggestion.type.replace('_', ' ')}
                            </span>
                            <span className={`px-3 py-1 rounded-full text-xs font-medium ${getRiskColor(suggestion.riskLevel)}`}>
                              {suggestion.riskLevel} risk
                            </span>
                          </div>
                          <div className="text-right">
                            <span className="text-sm font-medium text-gray-600">
                              {Math.round(suggestion.confidence * 100)}% confident
                            </span>
                          </div>
                        </div>
                        
                        <div className="bg-gray-50 rounded-lg p-4 mb-4">
                          <p className="text-gray-800 leading-relaxed">{suggestion.content}</p>
                        </div>
                        
                        <div className="space-y-2 mb-4">
                          <p className="text-sm text-gray-600">
                            <strong>Why this works:</strong> {suggestion.reasoning}
                          </p>
                          <p className="text-sm text-green-600">
                            <strong>Expected response:</strong> {suggestion.estimatedReception}
                          </p>
                        </div>
                        
                        <div className="flex justify-end">
                          <button
                            onClick={() => postComment(suggestion)}
                            className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-orange-600 hover:to-red-600 transition-all transform hover:scale-105 flex items-center space-x-2"
                          >
                            <span>üì§</span>
                            <span>Post to Reddit</span>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : userInput.trim() ? (
                  <div className="text-center py-8 text-gray-500">
                    <p>Click "Get AI Suggestions" to generate personalized comment ideas based on your input!</p>
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <p>Share your thoughts above to get AI-powered comment suggestions tailored to this post and subreddit rules.</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}